{{- if and .Values.k6.enabled (eq .Values.k6.enabled true) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-loadtest-script
  namespace: {{ .Values.app.namespace }}
data:
  script.js: |
    import http from "k6/http";
    import { Counter } from 'k6/metrics';

    const checkPass = new Counter('check_pass');
    const checkFail = new Counter('check_fail');

    const CHECKS = {
      "response status 200": (res, jsonRes) => res.status === 200,
      "response has data": (res, jsonRes) => jsonRes && Object.keys(jsonRes).length > 0,
    };

    export function setup() {
      for (const checkName of Object.keys(CHECKS)) {
        checkPass.add(0, { check: checkName });
        checkFail.add(0, { check: checkName });
      }
    }

    const APP_URL = "https://react-demo.gluki.io"
    const APP_TOKEN = `${__ENV.TOKEN}`

    export const options = {
      stages: [
        { duration: '5m', target: 100 }, // traffic ramp-up from 1 to 100 users over 5 minutes.
        { duration: '30m', target: 100 }, // stay at 100 users for 30 minutes
        { duration: '5m', target: 0 }, // ramp-down to 0 users
      ],
    };

    export default function () {
      const counter = Math.floor(Math.random() * 1e3) + 1;
      const url = `${APP_URL}/api/counter/increment`;
      const payload = JSON.stringify({
        counter,
      });
      const params = {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${APP_TOKEN}`,
        },
        redirects: 0,
      };
      const res = http.post(url, payload, params);
      let jsonRes;
      try {
        jsonRes = res.json();
      } catch (e) {
        jsonRes = {};
      }

      for (const [checkName, checkFn] of Object.entries(CHECKS)) {
        const passed = checkFn(res, jsonRes);
        if (passed) {
          checkPass.add(1, { check: checkName });
        } else {
          checkFail.add(1, { check: checkName });
        }
      }
    }
{{- end }}
